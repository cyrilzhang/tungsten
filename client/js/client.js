// Generated by CoffeeScript 1.6.3
var Controller, Parser, Prompt;

Parser = {
  open_brackets: "({[",
  close_brackets: ")}]",
  literal_markers: "\"'`",
  findProneIndices: function(str) {
    var bracket_level, c, close, i, lit, literal_level, open, prone, _i, _ref;
    bracket_level = [0, 0, 0];
    literal_level = [0, 0, 0];
    prone = [];
    for (i = _i = 0, _ref = str.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      c = str.charAt(i);
      lit = Parser.literal_markers.indexOf(c);
      open = Parser.open_brackets.indexOf(c);
      close = Parser.close_brackets.indexOf(c);
      if (lit !== -1) {
        literal_level[lit] = 1 - literal_level[lit];
      } else if (literal_level === [0, 0, 0]) {
        if (open !== -1) {
          bracket_level[open] += 1;
        } else if (close !== -1) {
          bracket_level[close] -= 1;
        }
      }
      console.log(literal_level, bracket_level);
      if (literal_level === [0, 0, 0] && bracket_level === [0, 0, 0]) {
        prone.push(i);
      }
    }
    return prone;
  },
  parseFreeforms: function(str) {
    return {
      error: "freeform"
    };
  },
  parseLines: function(str) {
    return {
      error: "linesub"
    };
  },
  parseAt: function(str) {
    var expr, pos, raw_subs;
    pos = str.search(" at ");
    if (pos === -1) {
      return null;
    }
    expr = raw.substr(0, at_index);
    raw_subs = raw.substr(at_index + 3, raw.length - at_index - 3);
    return {
      type: "at",
      expr: expr,
      subs: subs
    };
  },
  parseLet: function(str) {
    return {
      error: "let"
    };
  },
  parse: function(str) {
    return {
      error: "full"
    };
  },
  toMathematica: function(tree) {
    return "x^2";
  }
};

Controller = {
  url: 'http://127.0.0.1:8000/',
  get: function(msg, callback, ajaxerr_callback, syntaxerr_callback) {
    var tree;
    tree = Parser.parse(msg);
    if (tree.error != null) {
      return syntaxerr_callback(tree.error);
    } else {
      return $.post(Controller.url, {
        data: Parser.toMathematica(tree)
      }, callback).error(ajaxerr_callback);
    }
  }
};

Prompt = {
  count: 1,
  active: null,
  history: [],
  results: [],
  history_pos: 0,
  toggles: [true, false, false],
  dots: null,
  make: function(prefix, content) {
    var block, c, p;
    p = $('<div class="prompt-p"/>').text(prefix);
    c = $('<input type="text" class="prompt-c"/>').val(content);
    return block = $('<div class="prompt-b"/>').append(p, c);
  },
  hist: function(prefix, content) {
    var block;
    block = Prompt.make(prefix, content);
    block.find('input').attr('readonly', 'readonly');
    return $('#container').append(block);
  },
  submit: function() {
    var cmd, out;
    if (!Prompt.active.find(".prompt-c").is(":focus")) {
      Prompt.active.find(".prompt-c").focus();
      return;
    }
    cmd = Prompt.active.find(".prompt-c").val();
    if (cmd === "") {
      return;
    }
    Prompt.active.hide();
    Prompt.ndots = 0;
    Prompt.dots.show();
    Prompt.history.push(cmd);
    Prompt.history_pos = Prompt.history.length;
    Prompt.hist(Prompt.count + ">", cmd);
    return out = Controller.get(cmd, Prompt.success, Prompt.ajaxError, Prompt.syntaxError);
  },
  success: function(out) {
    var block, line1, line2, segments;
    segments = out.split('%%%');
    segments[0].replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    segments[1].replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    block = $('<div class="output texrender"/>').text("$" + segments[0] + "$");
    line1 = $('<div class="output texcode"/>').text(segments[0]);
    line2 = $('<div class="output mathcode"/>').text(segments[1]);
    if (!Prompt.toggles[0]) {
      block.hide();
    }
    if (!Prompt.toggles[1]) {
      line1.hide();
    }
    if (!Prompt.toggles[2]) {
      line2.hide();
    }
    Prompt.results.push(segments[1]);
    $('#container').append(block, line1, line2);
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, block[0]]);
    return Prompt.next(true);
  },
  next: function(success) {
    if (success) {
      Prompt.count += 1;
    }
    Prompt.active.show();
    Prompt.dots.hide();
    Prompt.active.find(".prompt-p").text(Prompt.count + ">");
    Prompt.active.find(".prompt-c").val("").focus();
    return $('html, body').scrollTop($(document).height());
  },
  ajaxError: function(out) {
    var errline;
    errline = $('<div class="output error"/>').text("Connection error");
    $('#container').append(errline);
    return Prompt.next(false);
  },
  syntaxError: function(out) {
    var errline;
    errline = $('<div class="output error"/>').text("Syntax error: " + out);
    $('#container').append(errline);
    return Prompt.next(false);
  },
  up: function() {
    if (Prompt.history_pos > 0) {
      --Prompt.history_pos;
      Prompt.active.find(".prompt-c").val(Prompt.history[Prompt.history_pos]);
    }
    return false;
  },
  down: function() {
    if (Prompt.history_pos < Prompt.history.length) {
      ++Prompt.history_pos;
      if (Prompt.history_pos === Prompt.history.length) {
        Prompt.active.find(".prompt-c").val("");
      } else {
        Prompt.active.find(".prompt-c").val(Prompt.history[Prompt.history_pos]);
      }
    }
    return false;
  },
  ndots: 0,
  tick: function() {
    Prompt.ndots = (Prompt.ndots + 1) % 5;
    return Prompt.dots.text(Array(Prompt.ndots + 2).join("."));
  }
};

$(function() {
  Prompt.active = $("#prompt").append(Prompt.make("", ""));
  Prompt.active.find(".prompt-p").text(Prompt.count + ">");
  Prompt.dots = $("#dots");
  setInterval(Prompt.tick, 100);
  $("#wa").click(function() {
    return location.reload();
  });
  $("#toggl1").click(function(e) {
    $("#toggl1").toggleClass("down");
    Prompt.toggles[0] = !Prompt.toggles[0];
    if (Prompt.toggles[0]) {
      $(".texrender").show();
    } else {
      $(".texrender").hide();
    }
    return window.scrollTo(0, document.body.scrollHeight);
  });
  $("#toggl2").click(function(e) {
    $("#toggl2").toggleClass("down");
    Prompt.toggles[1] = !Prompt.toggles[1];
    if (Prompt.toggles[1]) {
      $(".texcode").show();
    } else {
      $(".texcode").hide();
    }
    return window.scrollTo(0, document.body.scrollHeight);
  });
  $("#toggl3").click(function(e) {
    $("#toggl3").toggleClass("down");
    Prompt.toggles[2] = !Prompt.toggles[2];
    if (Prompt.toggles[2]) {
      $(".mathcode").show();
    } else {
      $(".mathcode").hide();
    }
    return window.scrollTo(0, document.body.scrollHeight);
  });
  $(window).keydown(function(e) {
    switch (e.which) {
      case 13:
        return Prompt.submit();
      case 38:
        return Prompt.up();
      case 40:
        return Prompt.down();
      case 17:
      case 91:
        return false;
    }
  }).click(function(e) {
    if (e.target.id === "parent-target") {
      return Prompt.active.find(".prompt-c").focus();
    }
  });
  return Prompt.active.find(".prompt-c").focus();
});
